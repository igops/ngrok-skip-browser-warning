# drop all unknown domains
server {
    listen 80 default_server;
    return 444;
}

{% if ProxyUseSSL == 'true' -%}
{% if ProxyForceHTTPS == 'true' -%}
# force redirect to HTTPS
server {
    listen 80;
    location / {
        return 301 https://$host$request_uri;
    }
}
{%- endif %}

# drop all unknown domains (SSL)
server {
    listen 443 ssl default_server;
    ssl_certificate /etc/nginx/certs/{{ ProxySSLCertName }};
    ssl_certificate_key /etc/nginx/certs/{{ ProxySSLKeyName }};
    return 444;
}
{%- endif %}

# a basic ngrok HTTP proxy
server {
    server_name localhost {{ ProxyHostREST }};
    {% if ProxyForceHTTPS != 'true' -%}
    listen 80;
    {%- endif %}

    {% if ProxyUseSSL == 'true' -%}
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/{{ ProxySSLCertName }};
    ssl_certificate_key /etc/nginx/certs/{{ ProxySSLKeyName }};
    {%- endif %}

    location / {
        # the following line does the actual trick
        proxy_set_header ngrok-skip-browser-warning 1;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host {{ TargetHost }};

        {% if AddHeaderAccessControlAllowOrigin != '' -%}
        add_header Access-Control-Allow-Origin {{ AddHeaderAccessControlAllowOrigin }};
        {%- endif %}

        # setting $upstream variable allows to avoid start-up crash if host is not reachable
        # https://stackoverflow.com/a/32846603/20085654
        resolver 8.8.8.8 valid=30s;
        set $upstream {{ TargetScheme }}://{{ TargetHost }};
        proxy_pass $upstream;
    }
}

# ngrok proxy with WebSocket support
server {
    server_name {{ ProxyHostWSSupport }};
    {% if ProxyForceHTTPS != 'true' -%}
    listen 80;
    {%- endif %}

    {% if ProxyUseSSL == 'true' -%}
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/{{ ProxySSLCertName }};
    ssl_certificate_key /etc/nginx/certs/{{ ProxySSLKeyName }};
    {%- endif %}

    location / {
        proxy_set_header ngrok-skip-browser-warning 1;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host {{ TargetHost }};

        # https://www.nginx.com/blog/websocket-nginx/
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        {% if AddHeaderAccessControlAllowOrigin != '' -%}
        add_header Access-Control-Allow-Origin {{ AddHeaderAccessControlAllowOrigin }};
        {%- endif %}

        resolver 8.8.8.8 valid=30s;
        set $upstream {{ TargetScheme }}://{{ TargetHost }};
        proxy_pass $upstream;
    }
}

# ngrok proxy with SSE support
server {
    server_name {{ ProxyHostSSESupport }};
    {% if ProxyForceHTTPS != 'true' -%}
    listen 80;
    {%- endif %}

    {% if ProxyUseSSL == 'true' -%}
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/{{ ProxySSLCertName }};
    ssl_certificate_key /etc/nginx/certs/{{ ProxySSLKeyName }};
    {%- endif %}

    location / {
        proxy_set_header ngrok-skip-browser-warning 1;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host {{ TargetHost }};

        # https://stackoverflow.com/a/13673298/20085654
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        chunked_transfer_encoding off;
        proxy_buffering off;
        proxy_cache off;

        {% if AddHeaderAccessControlAllowOrigin != '' -%}
        add_header Access-Control-Allow-Origin {{ AddHeaderAccessControlAllowOrigin }};
        {%- endif %}

        resolver 8.8.8.8 valid=30s;
        set $upstream {{ TargetScheme }}://{{ TargetHost }};
        proxy_pass $upstream;
    }
}